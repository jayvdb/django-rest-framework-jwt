[metadata]
name = drf-jwt
version = attr: rest_framework_jwt.__version__
description = JSON Web Token based authentication for Django REST framework
long_description = file: README.md
keywords = Styria CMS, JSON API
author = Styria Digital
author_email = digital-development@styria.hr
license = MIT
license_file = LICENSE
url = https://github.com/Styria-Digital/django-rest-framework-jwt
platforms = POSIX, Microsoft, MacOS
classifiers =
    Development Status :: 5 - Production/Stable
    Environment :: Web Environment
    Framework :: Django
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.4
    Programming Language :: Python :: 3.5
    Programming Language :: Python :: 3.6
    Topic :: Internet :: WWW/HTTP

[paths]
source =
   src/rest_framework_jwt
   .tox/*/lib/python*/site-packages/rest_framework_jwt

[options]
python_requires = >= 2.7, != 3.0.*, != 3.1.*, != 3.2.*
zip_safe = False
include_package_data = True
install_requires =
    PyJWT>=1.5.2,<2.0.0
    Django>=1.11
    djangorestframework>=3.7,<3.10

[options.package_data]
* = *.md, *.rst, LICENSE, pyproject.toml, setup.cfg, setup.py

[options.exclude_package_data]
* = __pycache__, *.py[co]

[options.extras_require]
dev =
    tox
lint =
    isort
    yapf
    pylint
    pylint-django==0.11.1
# Note pytest 4.2 is incompatible with pytest-django wrt Django 2.2
# https://github.com/pytest-dev/pytest/issues/4704
test =
    mock
    pytest>=3.0,<4.2
    pytest-cov
    pytest-django
    pytest-runner
    cryptography==2.0.3
docs =
    mkdocs==0.13.2

[bdist_wheel]
universal = 1

[aliases]
test=pytest

[tool:pytest]
addopts =
    --cov-config .coveragerc
    --cov-report term
    -p no:warnings
django_find_project = false
testpaths = tests

[coverage:run]
branch = True
source = rest_framework_jwt

[coverage:report]
show_missing = True
omit =
    .tox/*
    rest_framework_jwt/migrations/*
    tests/*
    setup.py

[coverage:paths]
source =
    src/

[isort]
# Reference: https://github.com/timothycrosley/isort/wiki/isort-Settings
skip=.tox,bin,changelogs,example,docs
atomic=true
multi_line_output=2
known_django=django
known_rest_framework=rest_framework
known_third_party=mock,pytz,faker,model_utils,responses,factory
known_first_party=rest_framework_jwt
sections=FUTURE,STDLIB,THIRDPARTY,DJANGO,REST_FRAMEWORK,FIRSTPARTY,LOCALFOLDER

[yapf]
based_on_style = pep8

# Allow splits before the dictionary value.
allow_split_before_dict_value=True

# Do not split consecutive brackets. Only relevant when
# dedent_closing_brackets is set. For example:
#
#    call_func_that_takes_a_dict(
#        {
#            'key1': 'value1',
#            'key2': 'value2',
#        }
#    )
#
# would reformat to:
#
#    call_func_that_takes_a_dict({
#        'key1': 'value1',
#        'key2': 'value2',
#    })
coalesce_brackets=True

# Put closing brackets on a separate line, dedented, if the bracketed
# expression can't fit in a single line. Applies to all kinds of brackets,
# including function definitions and calls. For example:
#
#   config = {
#       'key1': 'value1',
#       'key2': 'value2',
#   }        # <--- this bracket is dedented and on a separate line
#
#   time_series = self.remote_client.query_entity_counters(
#       entity='dev3246.region1',
#       key='dns.query_latency_tcp',
#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),
#       start_ts=now()-timedelta(days=3),
#       end_ts=now(),
#   )        # <--- this bracket is dedented and on a separate line
dedent_closing_brackets=True

# Indent the dictionary value if it cannot fit on the same line as the
# dictionary key. For example:
#
#   config = {
#       'key1':
#           'value1',
#       'key2': value1 +
#               value2,
#   }
indent_dictionary_value=True

# If an argument / parameter list is going to be split, then split before
# the first argument.
split_before_first_argument=True

# Set to True to prefer splitting before 'and' or 'or' rather than
# after.
split_before_logical_operator=True

# Split named assignments onto individual lines.
split_before_named_assigns=False

# Insert a blank line before a 'def' or 'class' immediately nested
# within another 'def' or 'class'. For example:
#
#   class Foo:
#                      # <------ this blank line
#     def method():
#       ...
blank_line_before_nested_class_or_def=True

# Set to True to split list comprehensions and generators that have
# non-trivial expressions and multiple clauses before each of these
# clauses. For example:
#
#   result = [
#       a_long_var + 100 for a_long_var in xrange(1000)
#       if a_long_var % 10]
#
# would reformat to something like:
#
#   result = [
#       a_long_var + 100
#       for a_long_var in xrange(1000)
#       if a_long_var % 10]
split_complex_comprehension=True

# The penalty of splitting a list of "import as" names. For example:
#
#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,
#                                                             long_argument_2,
#                                                             long_argument_3)
#
# would reformat to something like:
#
#   from a_very_long_or_indented_module_name_yada_yad import (
#       long_argument_1, long_argument_2, long_argument_3)
## HANDLED BY `isort`
split_penalty_import_names=10000
